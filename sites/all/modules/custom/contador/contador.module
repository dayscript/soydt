<?php
/**
 * Implements hook_theme().
 */
function contador_theme( $existing, $type, $theme, $path )
{
    $hooks = array();
    $hooks[ 'contador' ] = array(
        'variables' => array( 'data' => array() ),
        'template'  => "templates/contador"
    );

    $hooks[ 'depurar' ] = array(
        'variables' => array( 'data' => array() ),
        'template'  => "templates/depurar"
    );

    return $hooks;
}

/**
 * Implements hook_block_info().
 */
function contador_block_info()
{
    $blocks = array();
    $blocks[ 'contador' ] = array(
        'info'  => t( 'Cuenta Regresiva Proxima Fecha' ),
        'cache' => DRUPAL_NO_CACHE,
    );
    $blocks[ 'depurar_equipos' ] = array(
        'info'  => t( 'Depurador de equipos y alineaciones' ),
        'cache' => DRUPAL_NO_CACHE,
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function contador_block_view( $delta = '' )
{
    $block = array();
    switch ( $delta )
    {
        case 'contador':
            $block[ 'content' ] = theme( 'contador', array( 'data' => contador_data() ) );
            break;
        case 'depurar_equipos':
            $block[ 'content' ] = theme( 'depurar', array( 'data' => depurar_data() ) );
            break;
    }

    return $block;
}

function depurar_data()
{
    if(isset($_GET['start']))$start=$_GET['start'];
    else $start = 0;
    if(isset($_GET['limit']))$limit=$_GET['limit'];
    else $limit = 10;
    if(isset($_GET['process']))$process=true;
    else $process = false;
    $data = array();
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'equipo_de_usuario' )
        ->propertyCondition( 'status', 1 )
        ->range($start, $limit)
        ->execute();
    if ( isset( $result[ 'node' ] ) )
    {
        $nids = array_keys( $result[ 'node' ] );

        $equipos = entity_load( 'node', $nids );
        foreach ( $equipos as $equipo )
        {
            $us = user_load( $equipo->uid );
            $saldo = $us->field_saldo[ 'und' ][ 0 ][ 'value' ];
            if ( isset( $equipo->field_jugadores2[ 'und' ] ) )
            {
                $players = 0;
                $players2 = 0;
                $total = 0;
                foreach ( $equipo->field_jugadores2[ 'und' ] as $key => $jugador )
                {
                    if ( $player = node_load( $jugador[ 'target_id' ] ) )
                    {
                        $players ++;
                        $total += $player->field_precio[ 'und' ][ 0 ][ 'value' ];
                    } else
                    {
                        $data[ $us->uid ] = $us->mail;
                        $data["Equipo " . $equipo->nid][] = "Jugador no existe:" . $jugador[ 'target_id' ];
                        $players2 ++;
                        $equipo->field_jugadores2[ 'und' ][ $key ][ 'target_id' ] = 0;
                        if($process){
                            unset( $equipo->field_jugadores2[ 'und' ][ $key ] );
                            node_save( $equipo );
                        }
                    }
                }

                if ( isset( $us->field_saldo[ 'und' ][ 0 ][ 'value' ] ) )
                {
                    if ( $total > 500000000 )
                    {
                        foreach ( $equipo->field_jugadores2[ 'und' ] as $key => $jugador )
                        {
                            $equipo->field_jugadores2[ 'und' ][ $key ][ 'target_id' ] = 0;
                            if($process){
                                unset( $equipo->field_jugadores2[ 'und' ][ $key ] );
                            }
                        }
                        $us->field_saldo[ 'und' ][ 0 ][ 'value' ] = 500000000;
                        $data["Equipo " . $equipo->nid][] = "Valor de equipo mayor a 500, borrado todo el equipo";
                        $data["Usuario " . $us->uid][] = "Saldo ajustado a 500";
                        if($process){
                            node_save( $equipo );
                            user_save( $us );
                        }
                        $result = $query->entityCondition( 'entity_type', 'node' )
                            ->entityCondition( 'bundle', 'alineacion' )
                            ->propertyCondition( 'status', 1 )
                            ->propertyCondition( 'uid', $us->uid, "=" )
                            ->execute();

                        if ( isset( $result[ 'node' ] ) )
                        {
                            $nids = array_keys( $result[ 'node' ] );
                            $data["Equipo " . $equipo->nid][] = "Saldo mayor a 500, borradas alineaciones";
                            if($process){
                                node_delete_multiple( $nids );
                            }
                        }
                    } else if ( $total + $saldo > 500000000 )
                    {
                        $us->field_saldo[ 'und' ][ 0 ][ 'value' ] = 500000000 - $total;
                        $data["Usuario " . $us->uid][] = "Saldo+equipo mayor a 500, saldo ajustado";
                        if($process){
                            user_save( $us );
                        }
                    } else if ( $total + $saldo < 500000000 )
                    {
                        $us->field_saldo[ 'und' ][ 0 ][ 'value' ] = 500000000 - $total;
                        $data["Usuario " . $us->uid][] = "Saldo+equipo menor a 500, saldo ajustado";
                        if($process){
                            user_save( $us );
                        }
                    } else if ( $total + $saldo != 500000000 )
                    {
                        $data["Usuario " . $us->uid][] = "Saldo+equipo diferente a 500, no hace nada";
                    }
                }
            } else {
                if($saldo != 500000000){
                    $data["Usuario " . $us->uid][] = "No equipo, saldo diferente a 500, ajustar";
                    $us->field_saldo[ 'und' ][ 0 ][ 'value' ] = 500000000;
                    if($process){
                        user_save( $us );
                    }
                }
            }
        }
    }

    $result = $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'alineacion' )
        ->propertyCondition( 'status', 1 )
        ->range($start, $limit)
        ->execute();
    if ( isset( $result[ 'node' ] ) )
    {
        $nids = array_keys( $result[ 'node' ] );
        $alineaciones = entity_load( 'node', $nids );
        foreach ( $alineaciones as $ali )
        {
            //$data[] = $ali;
            $jugadores = array();
            for ( $i = 1; $i <= 11; $i ++ )
            {
                if ( isset( $ali->{"field_jugador" . $i}[ 'und' ] )
                    && isset( $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] )
                    && $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] > 0
                )
                {
                    if ( $player = node_load( $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] ) )
                    {
                        if ( in_array( $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ], $jugadores ) )
                        {
                            $data["Alineacion " . $ali->nid][] = "Jugador " . $i . " repetido: ".$ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ];
                            $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] = 0;
                            if($process){
                                node_save( $ali );
                            }
                        } else
                        {
                            $jugadores[ ] = $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ];
                        }

                    } else
                    {
                        $data["Alineacion " . $ali->nid][] = "Jugador " . $i . " no existe: ".$ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ];
                        $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] = 0;
                        if($process){
                            node_save( $ali );
                        }
                    }
                }
            }
            foreach ( $ali->field_suplentes[ 'und' ] as $key => $supl )
            {
                if ( $player = node_load( $supl[ 'target_id' ] ) )
                {
                    if ( in_array( $supl[ 'target_id' ], $jugadores ) )
                    {
                        $data["Alineacion " . $ali->nid][] = "Suplente repetido: ".$supl[ 'target_id' ];
                        $ali->field_suplentes[ 'und' ][ $key ][ 'target_id' ] = 0;
                        unset( $ali->field_suplentes[ 'und' ][ $key ] );
                        if($process){
                            node_save( $ali );
                        }
                    } else
                    {
                        $jugadores[ ] = $supl[ 'target_id' ];
                    }
                } else
                {
                    $data["Alineacion " . $ali->nid][] = "Suplente no existe: ".$supl[ 'target_id' ];
                    $ali->field_suplentes[ 'und' ][ $key ][ 'target_id' ] = 0;
                    unset( $ali->field_suplentes[ 'und' ][ $key ] );
                    if($process){
                        node_save( $ali );
                    }
                }
            }
            if ( isset( $ali->field_capitan[ 'und' ] )
                && isset( $ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ] )
                && $ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ] > 0
            )
            {
                if ( $player = node_load( $ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ] ) )
                {
                    //            ;
                } else
                {
                    $data["Alineacion " . $ali->nid][] = "Capitan no existe: ".$ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ];
                    $ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ] = 0;
                    $us = user_load( $ali->uid );
                    //$data[$us->uid] = $us->mail;
                    if($process){
                        node_save( $ali );
                    }
                }
            }
        }

    }
    //actualizar_alineaciones();
    //depurar_alineacion(14817,13994);
    return $data;
}

function depurar_alineacion( $alineacion_nid, $equipo_nid )
{
    $alineacion = node_load( $alineacion_nid );
    $equipo = node_load( $equipo_nid );
    $players = array();
    if(isset($equipo->field_jugadores2[ 'und' ])){
        foreach ( $equipo->field_jugadores2[ 'und' ] as $key => $player_id )
        {
            if ( $player = node_load( $player_id[ 'target_id' ] ) )
            {
                $players[$player_id[ 'target_id' ]] = $player;
                //autoalinear( $alineacion, $player );
            }
        }

    }
    for ( $i = 1; $i <= 11; $i ++ )
    {
        if ( isset( $alineacion->{"field_jugador" . $i}[ 'und' ] )
            && isset( $alineacion->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] )
            && $alineacion->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] > 0 ){
            if(isset($players[$alineacion->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ]])){
                unset($players[$alineacion->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ]]);
            } else {
                $alineacion->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] = 0;
                node_save( $alineacion );
            }
        }
    }
    foreach($players as $id=>$player){
        autoalinear( $alineacion, $player );
    }
}

function actualizar_alineaciones( $fecha1=10014, $fecha2 = 10015 )
{
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'alineacion' )
        ->propertyCondition( 'status', 1 )
        ->fieldCondition( 'field_fecha_torneo', 'target_id', $fecha2, '=' )
        ->execute();
    if ( isset( $result[ 'node' ] ) ) {
        $nids = array_keys( $result[ 'node' ] );
        $alineaciones2 = entity_load( 'node', $nids );
        foreach ( $alineaciones2 as $ali ){
            $query2 = new EntityFieldQuery();
            $result2 = $query2->entityCondition( 'entity_type', 'node' )
                ->entityCondition( 'bundle', 'alineacion' )
                ->propertyCondition( 'status', 1 )
                ->propertyCondition('uid',$ali->uid,"=")
                ->fieldCondition( 'field_fecha_torneo', 'target_id', $fecha1, '=' )
                ->execute();
            if ( isset( $result2[ 'node' ] ) ) {
                $nids = array_keys( $result2[ 'node' ] );
                node_delete($nids[0]);
                $ali->title = str_replace("Fecha 2","Fecha 1", $ali->title);
                $ali->field_fecha_torneo['und'][0]['target_id'] = $fecha1;
                node_save($ali);
            }
        }
    }
}

/**
 * @return timestamp
 */
function contador_data()
{
    $data = array();
    $data[ "date" ] = date( "Y-m-d H:i:s", time() + 60 * 60 );
    $data[ "name" ] = "Sin Fecha";
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'fecha_del_torneo' )
        ->propertyCondition( 'status', 1 )
        ->fieldOrderBy( 'field_inicio', 'value', 'ASC' )
        ->execute();
    if ( isset( $result[ 'node' ] ) )
    {
        $nids = array_keys( $result[ 'node' ] );
        $fechas = entity_load( 'node', $nids );
        $now = date( "Y-m-d H:i:s" );
        foreach ( $fechas as $fecha )
        {
            if ( $fecha->field_inicio[ 'und' ][ 0 ][ 'value' ] > $now )
            {
                $data[ "date" ] = $fecha->field_inicio[ 'und' ][ 0 ][ 'value' ];
                $data[ "name" ] = $fecha->title;
                $fecha->field_fecha_abierta[ 'und' ][ 0 ][ 'value' ] = 1;
                node_save( $fecha );
                $_SESSION[ 'fecha_activa' ] = $fecha;
                break;
            } else
            {
                $fecha->field_fecha_abierta[ 'und' ][ 0 ][ 'value' ] = 0;
                node_save( $fecha );
            }
        }
    }
    $path = drupal_get_path( 'module', 'contador' );
    drupal_add_js( $path . '/js/jquery.mb-comingsoon.min.js' );

    return $data;
}
