<?php
/**
 * Implements hook_theme().
 */
function puntajes_theme( $existing, $type, $theme, $path )
{
    $hooks = array();

    $hooks[ 'actualizar_puntajes' ] = array(
        'variables' => array( 'data' => array() ),
        'template'  => "templates/puntajes"
    );

    return $hooks;
}

/**
 * Implements hook_block_info().
 */
function puntajes_block_info()
{
    $blocks = array();
    $blocks[ 'actualizar_puntajes' ] = array(
        'info'  => t( 'Actualizar puntajes de usuarios' ),
        'cache' => DRUPAL_NO_CACHE,
    );

    return $blocks;
}


function puntajes_menu()
{
    $items['puntos_test'] = array(
      'page callback' => 'prueba_test_puntos',
      'access callback' => TRUE
    );
    return $items;
    
}

function prueba_test_puntos(){

    /*$query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'user' )
        ->propertyCondition('uid',1000, '>=')
        ->propertyCondition('uid',1500, '<=')
        ->execute();*/
    dpm(user_load(5000));
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'alineacion' )
        ->propertyCondition( 'status', 1 )
        ->propertyCondition('uid',2000, '>=')
        ->propertyCondition('uid',2500, '<=')
        ->fieldCondition( 'field_fecha_torneo', 'target_id',286721, '=' )
        ->execute();
    dpm($result);

    return 'ok';
}

/**
 * Implements hook_block_view().
 */
function puntajes_block_view( $delta = '' )
{
    $block = array();
    switch ( $delta )
    {
        case 'actualizar_puntajes':
            $block[ 'content' ] = theme( 'actualizar_puntajes', array( 'data' => actualizar_puntajes() ) );
            break;
    }

    return $block;
}

/*
 Sincroniza los datos de eventos puntuables entre el dayscore y la tabla local para una fecha determinada.
*/
function obtener_eventos( $fecha )
{
    return 'Eventos sincronizados.';
}

/**
 * Crea las alineaciones faltantes
 */
function repasar_alineaciones(){
    // http://www.soydt.co/premios?repasar&filter1=1000&filter2=1500
    $data[ "fecha" ] = $_SESSION[ "fecha_activa" ];
    $data[ "fechas" ] = get_fechas();
    if ( isset( $_GET[ 'filter1' ] ) ) $filter1 = $_GET[ 'filter1' ];
    else $filter1 = 0;
    if ( isset( $_GET[ 'filter2' ] ) ) $filter2 = $_GET[ 'filter2' ]; 
    else $filter2 = 100;
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'user' )
        ->propertyCondition('uid', $filter1, '>=')
        ->propertyCondition('uid', $filter2, '<=')
        ->execute();
    if ( isset( $result[ 'user' ] ) )
    {
        $uids = array_keys( $result[ 'user' ] );
        foreach ( $uids as $uid ){
            echo $uid . "<br>";
            $data[ "alineacion" ] = get_alineacion( $data[ "fecha" ], $data[ "fechas" ], $uid, true );
            //var_dump($data[ "alineacion" ]);
        }
    }
}

function actualizar_acumulado(){
    // http://www.soydt.co/premios?acumulado&filter1=0&filter2=1000
    $puntajes = array();
    $fecha_nid = 286721;// Fecha 9 - Primera fecha puntuable para acumulado
    if ( isset( $_GET[ 'filter1' ] ) ) $filter1 = $_GET[ 'filter1' ];
    else $filter1 = 0;
    if ( isset( $_GET[ 'filter2' ] ) ) $filter2 = $_GET[ 'filter2' ];
    else $filter2 = 100;
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'alineacion' )
        ->propertyCondition( 'status', 1 )
        ->propertyCondition('uid', $filter1, '>=')
        ->propertyCondition('uid', $filter2, '<=')
        ->fieldCondition( 'field_fecha_torneo', 'target_id', $fecha_nid, '>=' )
        ->execute();
    echo "Calculando totales<br>";
    if ( isset( $result[ 'node' ] ) )
    {
        $nids = array_keys( $result[ 'node' ] );
        $alineaciones = entity_load( 'node', $nids );
        
        foreach ( $alineaciones as $ali )
        {   if(!isset($puntajes[$ali->uid]))$puntajes[$ali->uid]=0;
            $puntajes[$ali->uid] += $ali->field_total['und'][0]['value'];
            echo $ali->field_total['und'][0]['value']."<br>";
        }
    }
    foreach($puntajes as $uid=>$total){
        $us = user_load($uid);
        if(!isset($us->field_total['und'][0]['value']) || $us->field_total['und'][0]['value'] != $total){
            $us->field_total['und'][0]['value'] = $total;
            user_save($us);
            echo $us->name . ": " . $total . "<br>";
        } else {
            echo $us->name . " Puntaje ya calculado: " . $total . "<br>";
        }
    }

}

function actualizar_puntajes()
{
    // http://www.soydt.co/premios?fecha=10014&start=1500&limit=501&process
    if(isset($_GET['repasar'])){
        repasar_alineaciones();
        exit;
    }

    if(isset($_GET['acumulado'])){
        actualizar_acumulado();
        exit;
    }

    if(isset($_GET['comparar'])) :
        comparar_alineaciones();
        exit;
    endif;

    $puntajes = array();
    if ( isset( $_GET[ 'fecha' ] ) ) $fecha_nid = $_GET[ 'fecha' ];
    else $fecha_nid = 286721;// Fecha 9
    if ( isset( $_GET[ 'filter1' ] ) ) $filter1 = $_GET[ 'filter1' ];
    else $filter1 = 1;
    if ( isset( $_GET[ 'filter2' ] ) ) $filter2 = $_GET[ 'filter2' ];
    else $filter2 = 100000;
        if ( isset( $_GET[ 'start' ] ) ) $start = $_GET[ 'start' ];
    else $start = 0;
    if ( isset( $_GET[ 'limit' ] ) ) $limit = $_GET[ 'limit' ];
    else $limit = 10;
    if ( isset( $_GET[ 'process' ] ) ) $process = true;
    else $process = false;
    $data = array();
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'alineacion' )
        ->propertyCondition( 'status', 1 )
        ->propertyCondition('uid', $filter1, '>=')
        ->propertyCondition('uid', $filter2, '<=')
        ->fieldCondition( 'field_fecha_torneo', 'target_id', $fecha_nid, '=' )
        ->range( $start, $limit )
        ->execute();
    if ( isset( $result[ 'node' ] ) )
    {
        $nids = array_keys( $result[ 'node' ] );
        $alineaciones = entity_load( 'node', $nids );
        foreach ( $alineaciones as $ali )
        {
            $total = 0;
            if ( isset( $ali->field_capitan[ 'und' ] )
                && isset( $ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ] )
                && $ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ] > 0
            )
            {
                $capitan = $ali->field_capitan[ 'und' ][ 0 ][ 'target_id' ];
            } else
            {
                $capitan = 0;
            }
            $jugadores = array();
            for ( $i = 1; $i <= 11; $i ++ )
            {
                if ( isset( $ali->{"field_jugador" . $i}[ 'und' ] )
                    && isset( $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] )
                    && $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] > 0
                )
                {
                    if ( $player = node_load( $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] ) )
                    {
                        if ( in_array( $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ], $jugadores ) )
                        {
                            $data[ "Alineacion " . $ali->nid ][] = "Jugador " . $i . " repetido: " . $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ];
                            $ali->{"field_jugador" . $i}[ 'und' ][ 0 ][ 'target_id' ] = 0;
                            if ( $process )
                            {
                                node_save( $ali );
                            }
                        } else
                        {
                            if ( !isset( $puntajes[ $player->nid ] ) )
                            {
                                $puntajes[$player->nid] = puntos_jugador_fecha($player->nid,$fecha_nid);
                            }
                            if ( $player->nid == $capitan ){
                                $total += $puntajes[$player->nid]*2;
                            } else {
                                $total += $puntajes[$player->nid];
                            }
                        }
                    }
                }
            }
            $data[ $ali->nid ] =  $total;
            if($process){
                $ali->field_total['und'][0]['value'] = $total;
                node_save($ali);
            }
        }
    }
    return $data;
}

function puntos_jugador_fecha($player,$fecha){
    $puntos = 0;
    $query2 = new EntityFieldQuery();
    $result2 = $query2->entityCondition( 'entity_type', 'node' )
        ->entityCondition( 'bundle', 'puntaje_jugador' )
        ->propertyCondition( 'status', 1 )
        ->fieldCondition( 'field_jugador', 'target_id', $player, '=' )
        ->fieldCondition( 'field_fecha_torneo', 'target_id', $fecha, '=' )
        ->execute();
    //echo $player . " " . $fecha . "<br>";
    if ( isset( $result2[ 'node' ] ) )
    {
        $nids2 = array_keys( $result2[ 'node' ] );
        $player_points = entity_load( 'node', $nids2 );
        foreach ( $player_points as $pp ) {
            $puntos = $pp->field_total[ 'und' ][ 0 ][ 'value' ];
        }
    } else {
        $puntos = 0;
    }
    return $puntos;
}

function comparar_alineaciones(){
    // http://www.soydt.co/premios?fecha=10014&comparar
    $data[ "fechas" ] = get_fechas();
    $fecha_comparar = (!isset($_GET['fecha'])) ? 286721 : $_GET['fecha'];
    foreach ($data[ "fechas" ] as $key => $value) :
        if( $value->nid == $fecha_comparar ) :
            $fecha_act = $data[ "fechas" ][$key];
            $fecha_ant = (isset($data[ "fechas" ][$key - 1])) ? $data[ "fechas" ][$key - 1] : $data[ "fechas" ][$key];
        endif;
    endforeach;
    if ( isset( $_GET[ 'filter1' ] ) ) $filter1 = $_GET[ 'filter1' ];
    else $filter1 = 0;
    if ( isset( $_GET[ 'filter2' ] ) ) $filter2 = $_GET[ 'filter2' ];
    else $filter2 = 1000;
    $query = new EntityFieldQuery();
    $result = $query->entityCondition( 'entity_type', 'user' )
        ->fieldOrderBy('field_total', 'value', 'DESC')
        ->range(0, 200)
        ->execute();
    if ( isset( $result[ 'user' ] ) )
    {
        $uids = array_keys( $result[ 'user' ] );
        foreach ( $uids as $uid ){
            if($fecha_act->nid != $fecha_ant->nid) :
                $data[ "alineacion1" ] = get_alineacion( $fecha_act, $data[ "fechas" ], $uid, false );
                $data[ "alineacion2" ] = get_alineacion( $fecha_ant, $data[ "fechas" ], $uid, false );
                if(!empty($data[ "alineacion1" ]) and !empty($data[ "alineacion2" ])) :
                    $players1 = $players2 = array();
                    foreach($data[ "alineacion1" ] as $key => $val) :
                        if(strpos($key, "field_jugador") !== false) $players1[$key] = $val['und'][0]['target_id'];
                    endforeach;
                    foreach($data[ "alineacion2" ] as $key => $val) :
                        if(strpos($key, "field_jugador") !== false) $players2[$key] = $val['und'][0]['target_id'];
                    endforeach;
                endif;
                $resultado = array_diff($players1, $players2);
                $resultado1 = array_diff($players2, $players1);
                if(!empty($resultado) and count($resultado) > 3) :
                    $user = user_load($uid);
                    echo "<p>".$uid . " : " . $user->mail . 
                         "<br> jugadores1: ( " . implode(" - ", $resultado) . 
                         " )<br>jugadores2: ( " . implode(" - ", $resultado1) . 
                         " ) --> El usuario realizo más de 3 cambios con respecto a la fecha anterior.";
                endif;
                //echo "<pre>";var_dump($resultado);exit;
            else :
                return "Primera fecha: no hay alineaciones para comparar.";
            endif;
        }
    }
}