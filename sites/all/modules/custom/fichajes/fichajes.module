<?php

/**
 * Implements hook_menu().
 */
function fichajes_menu() {

  $items = array();
  $items['admin/fichajes/jugadores/importacion'] = array(
    'title' => 'Importando Jugadores',
    'description' => 'Importacion de los datos de los jugadores desde dayscript.',
    'page callback' => 'importacion_jugadores',
    'access arguments' => array('access content'),
  );
  $items['jugar/fichajes/carrito'] = array(
    'title' => 'Mi Carrito',
    'page callback' => 'theme',
    'page arguments' => array('checkout_carrito'),
    "access callback" => true,
    'type' => MENU_CALLBACK
  );

  $items['jugar/alineacion'] = array(
    'title' => 'Alineación',
    'description' => 'Alineación.',
    'page callback' => 'reditect_alin',
    'access arguments' => array('access content'),
  );
  $items['jugar/alineacion/pruebas'] = array(
    'title' => 'Alineación de Pruebas',
    'page callback' => 'theme',
    'page arguments' => array('alineacion'),
    "access callback" => true,
    'type' => MENU_CALLBACK
  );

  return $items;
}

function reditect_alin(){
  drupal_goto('jugar/alineacion/'.$_SESSION['fecha']);
}
/**
 * Implements hook_theme().
 */
function fichajes_theme() {
    $hooks = array();
    $hooks['mi_carrito'] = array(
        'variables' => array('data' => array()),
        'template' => "templates/mi-carrito"
    );
    $hooks['checkout_carrito'] = array(
        'variables' => array(
          'data' => data_mi_carrito(),
        ),
        'template' => 'templates/checkout_carrito'
      );
    $hooks['alineacion'] = array(
        'variables' => array(
          'data' => alineacion_data(),
        ),
        'template' => 'templates/alineacion'
      );
    $hooks['countdown'] = array(
        'variables' => array('data' => array()),
        'template' => "templates/countdown"
    );
    return $hooks;
}
function alineacion_data(){
  drupal_add_js('http://code.jquery.com/ui/1.11.1/jquery-ui.js','external');
  return 'hola';
}

function fichajes_block_info() {

  $blocks = array();
  $blocks['filtros_fichajes'] = array(
    'info' => t('Formulario de filtros de fichajes.'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['mi_carrito'] = array(
    'info' => t('Carro de fichajes y datos del usuario.'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['countdown'] = array(
    'info' => t('Cuenta Regresiva Fecha'),
    'cache' => DRUPAL_NO_CACHE,
    );

  return $blocks;
}

function fichajes_block_view($delta = '') {

  $block = array();
  switch ($delta) {

    case 'filtros_fichajes':
    $block['subject'] = '';
    $block['content'] = drupal_get_form('filtros_fichajes_form');
    break;
    case 'mi_carrito':
            $block['content'] = theme('mi_carrito', array('data' => mi_carrito()));
    break;
    case 'mi_carrito':
            $block['content'] = theme('mi_carrito', array('data' => mi_carrito()));
    break;
    case 'countdown':
            $block['content'] = theme('countdown', array('data' => countdown()));
    break;
 
  }
  return $block;
}
function countdown(){
  $timestamp = null;
  $fechas = entity_load('fechas');
  foreach ($fechas as $fecha) {
      $activo = $fecha->field_activo[LANGUAGE_NONE][0]['value'];
       if($activo == 1){
        $timestamp = $fecha->field_id_dayscore[LANGUAGE_NONE][0]['value'];
      }
  }
  $path = drupal_get_path('module','fichajes');
  drupal_add_js($path.'/js/jquery.mb-comingsoon.min.js');
  drupal_add_css($path.'/css/mb-comingsoon.css');
  return $timestamp;
}

function mi_carrito(){
   $path = current_path();
   
   global $user;
   $datos ='';
   $total_fichajes = 0;
   $total_carrito = 0;
   if(empty($_SESSION['lists'])){
    $players_oncart = 0;
    $total_carrito = 0;
   }else{
    foreach ($_SESSION['lists'] as $key) {
        $player_oncart = entity_load_single('fichajes', $key);
        //dpm($player_oncart);
        $precio_player_oncart = $player_oncart->field_precio[LANGUAGE_NONE][0]['value'];
        //dpm($precio_player_oncart);
        $total_carrito += $precio_player_oncart;
      }
    $players_oncart = count($_SESSION['lists']);

   }

   $query = db_select('node', 'n');
    $query->fields('n', array('nid'))
        ->condition('n.type', 'alineaci_n')
        ->condition('n.uid', $user->uid);
    $result = $query->execute();
    $alineacion = $query->execute()->fetchField();
    $alineados = 0;
     if(empty($alineacion)) {
          $datos['fichajes'] = '15' - $players_oncart;
          $datos['presupuesto'] = '500000000' - $total_carrito;
          $datos['total_fichajes'] = $total_carrito;
           $datos['Links']="/carrito";
            $datos['texto_link'] = 'Ver compras';
          lists_total("total", $datos['presupuesto']); 
        }else{
          while($record = $result->fetchAssoc()) {
             $alineacion = node_load($record['nid']);
             //$datos['fichajes'] = $alineacion->field_n_fichajes[LANGUAGE_NONE][0]['value'];
             $ficha_restantes = $alineacion->field_n_fichajes[LANGUAGE_NONE][0]['value'];
             $presupuesto = $alineacion->field_dinero[LANGUAGE_NONE][0]['value'];
             $jugadores = $alineacion->field_jugadores[LANGUAGE_NONE];
             foreach ($jugadores as $jugador) {
               $play = entity_load_single('fichajes', $jugador['target_id']);
               $precioPlayer = $play->field_precio[LANGUAGE_NONE][0]['value'];
               $total_fichajes += $precioPlayer;
               //dpm($play);
               $alineados++;
             }
          }
              
             if($path != 'jugar/fichajes'){
                $datos['texto_link'] = 'Fichar';
                $datos['presupuesto'] = $presupuesto;
                $datos['fichajes'] = $ficha_restantes;
                  $datos['total_fichajes'] = $total_fichajes + $total_carrito;
                  $datos['Links']="";
                
             }else{
              $datos['Links']="/carrito";
              $datos['texto_link'] = 'Confirmar1';
              $datos['total_fichajes'] = $total_fichajes + $total_carrito;
                  $datos['fichajes'] = $ficha_restantes - $players_oncart;
                 if ($total_carrito != 0) {
                  $datos['texto_link'] = 'Ver compras';
                   $datos['presupuesto'] = $presupuesto - $total_carrito;
                 }else {
                  $datos['texto_link'] = 'Ver compras';
                   $datos['presupuesto'] = $presupuesto;
                 }
              }

              
             //dpm($datos['total_fichajes']);
             lists_total("total", $datos['presupuesto']);
        }
//        dpm($datos['presupuesto']);
        

        drupal_add_js("  
        jQuery({someValue: 0}).animate({someValue: ".$datos['presupuesto']."}, {
          duration: 3000,
          easing:'swing', // can be anything
          step: function() { // called on every step
              // Update the element's text with rounded-up value:
              jQuery('.presupuesto').text(commaSeparateNumber(Math.round(this.someValue)));
          },
          complete:function(){
              jQuery('.presupuesto').text(commaSeparateNumber(Math.round(this.someValue)));
          }
      });
      jQuery({tFichajesValue: 0}).animate({tFichajesValue: ".$datos['total_fichajes']."}, {
          duration: 3000,
          easing:'swing', // can be anything
          step: function() { // called on every step
              // Update the element's text with rounded-up value:
              jQuery('.ttl-fichajes').text(commaSeparateNumber(Math.round(this.tFichajesValue)));
          },
          complete:function(){
              jQuery('.ttl-fichajes').text(commaSeparateNumber(Math.round(this.tFichajesValue)));
          }
      });

     function commaSeparateNumber(val){
        while (/(\d+)(\d{3})/.test(val.toString())){
          val = val.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
        }
        return val;
      }","inline");
   //dpm($total_carrito);
  return $datos;
}
//LIGAS

function liga_privada_form($form, &$form_state, $liga){

      $form['pass'] = array(
        '#type' => 'textfield',
        '#title' => 'Contraseña',
        '#default_value' => '',
        '#size' => 60,
        '#maxlength' => 128,
      );
      $form['liga'] = array(
         '#value' => $liga,
         '#type' => 'hidden',

        );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Verificar',
      );

  return $form;
}
function liga_privada_form_submit($form, &$form_state) {
  global $user;
  $pass = $form_state['values']['pass'];
  $liga = $form_state['values']['liga'];


  $node_liga = node_load($liga);
  $node_pass = $node_liga->field_clave_pass[LANGUAGE_NONE][0]['value'];
  if($pass == $node_pass){
    drupal_goto('jugar/ligas/unirse/'.$liga);
  }else{
    form_set_error('title', 'Contraseña incorrecta.');
    //dpm($pass);
    //dpm($node_pass);
  }
}
function mi_liga_form($form, &$form_state, $entity){

      $form['id'] = array(
         '#value' => $entity,
         '#type' => 'hidden',

        );

      $form['submit'] = array(
        '#value' => 'Ver',
        '#type' => 'submit',
        //'#attributes' => array('class'=> array('boton-carro')),
        '#ajax' => array(
                  'callback' => 'ver_liga',
                    ),
      );

  return $form;
}
function ver_liga($form, &$form_state){
  $id = $form_state['values']['id'];
  $output = views_embed_view('pruebas', 'block_1', $id);
  $commands = array();
  $commands[] = ajax_command_html('.box-mis-ligas', $output);
 
  return array('#type' => 'ajax', '#commands' => $commands);
}
//END LIGAS

function guardar_alineacion_form($form, &$form_state){

      $form['id'] = array(
         '#value' => 'hei',
         '#type' => 'hidden',

        );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Guardar Cambios'),
        '#attributes' => array('class'=> array('boton-guardar')),
        '#ajax' => array(
                  'callback' => '',
                    ),
      );

  return $form;
}
function guardar_alineacion_mobile_form($form, &$form_state){

      $form['id'] = array(
         '#value' => 'hei',
         '#type' => 'hidden',

        );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Swicth'),
        '#attributes' => array('class'=> array('inactivo')),
        '#ajax' => array(
                  'callback' => 'eliminar_jugador_carrito',
                    ),
      );

  return $form;
}

function jugadores_form($form, &$form_state, $passed_variable){

      $form['id'] = array(
         '#value' => $passed_variable,
         '#type' => 'hidden',

        );

      $form['submit'] = array(
        '#type' => 'submit',
        '#attributes' => array('class'=> array('boton-carro')),
        '#ajax' => array(
                  'callback' => 'agregar_jugador_carrito',
                    ),
      );

  return $form;
}
function eliminar_jugador_form($form, &$form_state, $passed_variable){

      $form['id'] = array(
         '#value' => $passed_variable['jugador'],
         '#type' => 'hidden',

        );
      $form['presupuesto'] = array(
         '#value' => $passed_variable['presupuesto'],
         '#type' => 'hidden',

        );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Eliminar'),
        '#attributes' => array('class'=> array('boton-eliminar')),
        '#ajax' => array(
                  'callback' => 'eliminar_jugador_carrito',
                    ),
      );

  return $form;
}

function checkout_jugador_form($form, &$form_state, $passed_variable){

      $form['tipo'] = array(
         '#value' => $passed_variable['tipo'],
         '#type' => 'hidden',
        );

      $form['total'] = array(
         '#value' => $passed_variable['presupuesto'],
         '#type' => 'hidden',
        );
      $form['fichajes'] = array(
         '#value' => $passed_variable['fichajes'],
         '#type' => 'hidden',
        );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Comprar fichajes'),
        '#attributes' => array('class'=> array('boton-comprar')),
        '#ajax' => array(
                  'callback' => 'crear_alineacion',
                    ),
      );

  return $form;
}
function crear_alineacion($form, $form_state){

      $total = $form_state['values']['total'];
      $fichajes = $form_state['values']['fichajes'];
      $tipo = $form_state['values']['tipo'];
      global $user;

      $fechas = entity_load('fechas');
      foreach ($fechas as $fecha) {
          $activo = $fecha->field_activo[LANGUAGE_NONE][0]['value'];
           if($activo == 1){
           $condicion = $fecha->field_id_dayscore[LANGUAGE_NONE][0]['value'];
          }
      }

      if ($tipo == 'actualizar') {

        $alin_deleted = db_delete('modulo')
        ->condition('user', $user->uid)
        ->condition('fechat',$condicion,'=')
        ->execute();

        $query = db_select('node', 'n');
        $query->fields('n', array('nid'))
            ->condition('n.type', 'alineaci_n')
            ->condition('n.uid', $user->uid);
        $result = $query->execute();
        $alineacion = $query->execute()->fetchField();

        while ($alineacion1 = $result->fetchObject()) {
          $node = node_load($alineacion1->nid);
          $node->field_dinero[LANGUAGE_NONE][0]['value'] = $total;
          $node->field_n_fichajes[LANGUAGE_NONE][0]['value'] = $fichajes;
          $ultimoId = end(array_keys($node->field_jugadores[LANGUAGE_NONE]));
          $ultimoId++;
          
          foreach ($_SESSION['lists'] as $key) {
              //dpm($key);
              $node->field_jugadores[LANGUAGE_NONE][$ultimoId]['target_id'] = $key;
              $ultimoId++;
            }
          node_save($node);
        }
        
      }else{

      $query = db_select('node', 'n');
      $query->fields('n', array('nid'))
          ->condition('n.type', 'alineaci_n')
          ->condition('n.uid', $user->uid);
      $result = $query->execute();
      $alineacion = $query->execute()->fetchField();
      if(!empty($alineacion)) {

        $aline_deleted = db_delete('node')
        ->condition('uid', $user->uid)
        ->condition('type', 'alineaci_n')
        ->execute();
      }

        $node_etapa = (object) array(
          'uid' => $user->uid, 
          'name' => $user->name,
          'type' => 'alineaci_n', 
          'language' => LANGUAGE_NONE
        );
        $node_etapa->title = $user->name;
        $node_etapa->field_dinero[LANGUAGE_NONE][0]['value'] = $total;
        $node_etapa->field_n_fichajes[LANGUAGE_NONE][0]['value'] = $fichajes;
        $id = 0;
        foreach ($_SESSION['lists'] as $key) {
          //dpm($key);
          $node_etapa->field_jugadores[LANGUAGE_NONE][$id]['target_id'] = $key;
          $id++;
        }
        node_save($node_etapa);
      }
      session_unset();
      

}

function filtros_fichajes_form($form, &$form_state){
  //Ciudades
  global $user;
  $usuario = user_load($user->uid);
  //dpm($usuario);
  if(empty($usuario->field_c_dula) || $usuario->field_c_dula == NULL ){
    drupal_goto('user/'.$user->uid.'/edit');
  }else{
    $opciones_equipos = taxonomy_get_tree(2);

    $equipos_array['all'] = '--Seleccione--';

    foreach ($opciones_equipos as $opcion) {
    $tid = $opcion->tid;
    $termino = taxonomy_term_load($tid);
    $apodo = $termino->field_apodo[LANGUAGE_NONE][0]['value'];
    $value = $opcion->name;
    $equipos_array[$apodo] = $value;
    }
    $form['equipo'] = array(
      '#type' => 'select',
      '#options' => $equipos_array,
      '#title' => 'Equipo',
    );

    $posiciones = array(
                 'all' => '--Seleccione--',
                 '1' => 'Arquero',
                 '2' => 'Defensa',
                 '3' => 'Volante',
                 '4' => 'Delantero');

    $form['posicion'] = array(
      '#type' => 'select',
      '#options' => $posiciones,
      '#title' => 'Posición',
    );

    $categorias = array(
                   'all' => '--Seleccione--',
                   'A' => 'Cracks',
                   'B' => 'Estrellas',
                   'C' => 'Talentosos 1',
                   'D' => 'Talentosos 2',
                   'E' => 'Veteranos',
                   'F' => 'Rookies');

    $form['categoria'] = array(
      '#type' => 'select',
      '#options' => $categorias,
      '#title' => 'Categorias',
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Buscar',//Buscar
      '#ajax' => array(
                'callback' => 'actualizar_fichajes',
                  ),
    );
    //dpm($form);
    return $form;
}
  
}
function actualizar_fichajes($form, &$form_state){
    $equipo = $form_state['values']['equipo'];
    $posicion = $form_state['values']['posicion'];
    $categoria = $form_state['values']['categoria'];
    $output = views_embed_view('fichajes', 'block_1', $equipo, $posicion, $categoria);
    $commands = array();
    $commands[] = ajax_command_html('#fichajes', $output);
 
     return array('#type' => 'ajax', '#commands' => $commands);
}

function eliminar_jugador_carrito($form, $form_state){
  $id = $form_state['values']['id'];
  $presupuesto = $form_state['values']['presupuesto'];
  unset($_SESSION['lists']['s_key'.$id]);

  $ultimoId = end(array_keys($_SESSION['total']));
  unset($_SESSION['total'][$ultimoId]);

  lists_total("total".$id, $presupuesto);

  
  $script = "<script>
  location.reload();
  </script>";
  return $script;
}

function agregar_jugador_carrito($form, &$form_state){
  global $user;
  $id = $form_state['values']['id'];
  $jugadorAlineacion = array();
  $jugador = entity_load_single('fichajes',$id);
  $precio = $jugador->field_precio[LANGUAGE_NONE][0]['value'];
  $ultimoId = end(array_keys($_SESSION['total']));
  $totalus = $_SESSION['total'][$ultimoId];
  $lista = $_SESSION['lists'];
  $players_oncart = count($_SESSION['lists']);

    $query = db_select('node', 'n');
    $query->fields('n', array('nid'))
        ->condition('n.type', 'alineaci_n')
        ->condition('n.uid', $user->uid);
    $result = $query->execute();
    $alineacion = $query->execute()->fetchField();
    $alineacion1 = node_load($alineacion);
    
    if(empty($alineacion) || $alineacion == NULL){
      $ficha_restantes = 15;
    }else{
      $ficha_restantes = $alineacion1->field_n_fichajes[LANGUAGE_NONE][0]['value'];
    }
    
       $jugadores = $alineacion1->field_jugadores[LANGUAGE_NONE];
       
       foreach ($jugadores as $jugador) {
          $jugadorAlineacion[] = $jugador['target_id'];
       }
       $totales = $ficha_restantes - $players_oncart;
  if(in_array($id, $jugadorAlineacion)){
      return '<script>jQuery("#enAlineacion").dialog({ modal: true, resizable: false });</script>';
  }elseif (in_array($id, $lista)) {
     return '<script>jQuery("#enCarrito").dialog({ modal: true, resizable: false });</script>';
  }elseif ($totales <= 0) {
    return '<script>jQuery("#sinFichajes").dialog({ modal: true, resizable: false });</script>';
  }elseif ($ficha_restantes == 0) {
    return '<script>jQuery("#sinFichajes").dialog({ modal: true, resizable: false });</script>';
  }elseif ($players_oncart == 15) {
    return '<script>jQuery("#sinFichajes").dialog({ modal: true, resizable: false });</script>';
  }elseif ($totalus < $precio ) {
    return '<script>jQuery("#sinPresupuesto").dialog({ modal: true, resizable: false });</script>';
  }else{
    lists_total("total".$id, $_SESSION['total'][$ultimoId] - $precio);
    lists_session("s_key".$form_state['values']['id'], $form_state['values']['id']);
    return "<script>
    jQuery('.boton-carro').hide();
    var presupuesto = jQuery( '.presupuesto' ).html();
    var totalFichajes = jQuery( '.ttl-fichajes' ).html();
    var dispoFichajes = jQuery('.nro-fichajes').html();
    var unftFichajes = totalFichajes.replace(/,/g, '');
    var actTotalFichajes =  parseFloat(unftFichajes) + parseFloat(".$precio.");
    var unformatted = presupuesto.replace(/,/g, '');
    if (unformatted < ".$precio." ) {
      console.log(".$id.");
      console.log(unformatted);
      
      alert('Su Presupuesto es insuficiente....');
    }else{

    var total = unformatted - ".$precio.";

    jQuery({someValue: 0}).animate({someValue: total}, {
            duration: 2000,
            easing:'swing', // can be anything
            step: function() { // called on every step
                // Update the element's text with rounded-up value:
                jQuery('.presupuesto').text(commaSeparateNumber(Math.round(this.someValue)));
            },
            complete:function(){
                jQuery('.presupuesto').text(commaSeparateNumber(Math.round(this.someValue)));
                jQuery('.boton-carro').show();
            }
        });
    
     jQuery({tFichajesValue: 0}).animate({tFichajesValue: actTotalFichajes}, {
            duration: 2000,
            easing:'swing', // can be anything
            step: function() { // called on every step
                // Update the element's text with rounded-up value:
                jQuery('.ttl-fichajes').text(commaSeparateNumber(Math.round(this.tFichajesValue)));
            },
            complete:function(){
                jQuery('.ttl-fichajes').text(commaSeparateNumber(Math.round(this.tFichajesValue)));
            }
        });

       function commaSeparateNumber(val){
          while (/(\d+)(\d{3})/.test(val.toString())){
            val = val.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
          }
          return val;
        }
        var num = parseInt(jQuery.trim(jQuery('.nro-fichajes').html()));
        jQuery('.nro-fichajes').html(--num);
    }
    
        </script>";
  }
  
}
function lists_session($key, $value = NULL) {
  static $storage;
  if ($value) {
    $storage[$key] = $value ;
    $_SESSION['lists'][$key] = $value ;   // I use 'lists' in case some other module uses 'type' in $_SESSION
  }
  else if (empty($storage[$key]) && isset($_SESSION['lists'][$key])) {
    $storage[$key] = $_SESSION['lists'][$key];
  }
  return $storage[$key];
}
function lists_total($key, $value = NULL) {
  static $storage;
  if ($value) {
    $storage[$key] = $value ;
    $_SESSION['total'][$key] = $value ;   // I use 'lists' in case some other module uses 'type' in $_SESSION
  }
  else if (empty($storage[$key]) && isset($_SESSION['total'][$key])) {
    $storage[$key] = $_SESSION['total'][$key];
  }
  return $storage[$key];
}
/**
 * Implements hook_views_api().
 */
function fichajes_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fichajes') . '/views',
  );
}

function data_mi_carrito(){
  //dpm($_SESSION['lists']);
  $datos = '';
  $datos['jugadores'] = '';
  return $datos;
}
